const PUZZLE_CATALOG = [
  {
    id: 'classic-easy-001',
    name: 'Morning Warmup',
    variant: 'classic',
    difficulty: 'easy',
    size: 9,
    release: '2025-02-01',
    puzzle: [
      [9, 0, 4, 6, 7, 5, 1, 0, 0],
      [2, 3, 0, 9, 8, 4, 0, 0, 7],
      [6, 7, 0, 2, 3, 0, 0, 9, 8],
      [0, 0, 0, 8, 4, 0, 9, 7, 0],
      [8, 4, 2, 7, 5, 9, 6, 3, 1],
      [0, 5, 9, 0, 1, 6, 0, 0, 0],
      [1, 6, 0, 0, 2, 3, 0, 5, 9],
      [4, 0, 0, 5, 9, 8, 0, 1, 6],
      [0, 0, 8, 1, 6, 7, 3, 0, 2],
    ],
    solution: [
      [9, 8, 4, 6, 7, 5, 1, 2, 3],
      [2, 3, 1, 9, 8, 4, 5, 6, 7],
      [6, 7, 5, 2, 3, 1, 4, 9, 8],
      [3, 1, 6, 8, 4, 2, 9, 7, 5],
      [8, 4, 2, 7, 5, 9, 6, 3, 1],
      [7, 5, 9, 3, 1, 6, 2, 8, 4],
      [1, 6, 7, 4, 2, 3, 8, 5, 9],
      [4, 2, 3, 5, 9, 8, 7, 1, 6],
      [5, 9, 8, 1, 6, 7, 3, 4, 2],
    ],
    summary: 'Standard 9x9 with friendly symmetry to ease into the day.',
  },
  {
    id: 'classic-easy-002',
    name: 'Coffee Break',
    variant: 'classic',
    difficulty: 'easy',
    size: 9,
    release: '2025-02-08',
    puzzle: [
      [4, 0, 8, 1, 0, 9, 7, 0, 3],
      [0, 7, 0, 0, 4, 8, 1, 6, 0],
      [0, 1, 9, 0, 0, 0, 2, 4, 0],
      [3, 4, 0, 6, 8, 1, 5, 9, 7],
      [8, 6, 0, 5, 9, 7, 0, 3, 2],
      [9, 5, 7, 4, 3, 2, 0, 8, 1],
      [0, 8, 6, 0, 0, 0, 3, 7, 0],
      [0, 3, 4, 8, 2, 0, 0, 1, 0],
      [1, 0, 5, 3, 0, 4, 8, 0, 6],
    ],
    solution: [
      [4, 2, 8, 1, 6, 9, 7, 5, 3],
      [5, 7, 3, 2, 4, 8, 1, 6, 9],
      [6, 1, 9, 7, 5, 3, 2, 4, 8],
      [3, 4, 2, 6, 8, 1, 5, 9, 7],
      [8, 6, 1, 5, 9, 7, 4, 3, 2],
      [9, 5, 7, 4, 3, 2, 6, 8, 1],
      [2, 8, 6, 9, 1, 5, 3, 7, 4],
      [7, 3, 4, 8, 2, 6, 9, 1, 5],
      [1, 9, 5, 3, 7, 4, 8, 2, 6],
    ],
    summary: 'Gentle single-candidate deductions with lots of singles.',
  },
  {
    id: 'classic-medium-001',
    name: 'Focus Drill',
    variant: 'classic',
    difficulty: 'medium',
    size: 9,
    release: '2025-02-01',
    puzzle: [
      [0, 4, 2, 8, 3, 0, 0, 6, 0],
      [3, 0, 0, 5, 0, 0, 0, 7, 0],
      [6, 0, 5, 2, 0, 4, 0, 0, 1],
      [0, 3, 9, 0, 0, 0, 0, 2, 0],
      [0, 0, 4, 0, 2, 7, 9, 0, 0],
      [0, 7, 0, 0, 0, 0, 0, 5, 0],
      [4, 0, 0, 3, 0, 2, 6, 0, 8],
      [0, 8, 0, 0, 0, 5, 0, 0, 2],
      [0, 2, 0, 0, 9, 8, 7, 4, 0],
    ],
    solution: [
      [7, 4, 2, 8, 3, 1, 5, 6, 9],
      [3, 1, 8, 5, 6, 9, 2, 7, 4],
      [6, 9, 5, 2, 7, 4, 8, 3, 1],
      [8, 3, 9, 4, 5, 6, 1, 2, 7],
      [5, 6, 4, 1, 2, 7, 9, 8, 3],
      [2, 7, 1, 9, 8, 3, 4, 5, 6],
      [4, 5, 7, 3, 1, 2, 6, 9, 8],
      [9, 8, 6, 7, 4, 5, 3, 1, 2],
      [1, 2, 3, 6, 9, 8, 7, 4, 5],
    ],
    summary: 'Requires cross-hatching and a handful of hidden singles.',
  },
  {
    id: 'classic-medium-002',
    name: 'Steady Groove',
    variant: 'classic',
    difficulty: 'medium',
    size: 9,
    release: '2025-02-08',
    puzzle: [
      [0, 0, 0, 2, 1, 3, 9, 6, 0],
      [3, 0, 2, 0, 5, 0, 0, 0, 8],
      [0, 5, 0, 7, 8, 0, 0, 0, 0],
      [0, 2, 4, 0, 0, 1, 6, 0, 7],
      [5, 0, 0, 0, 0, 0, 0, 0, 9],
      [1, 0, 3, 6, 0, 0, 4, 8, 0],
      [0, 0, 0, 0, 4, 7, 0, 2, 0],
      [2, 0, 0, 0, 6, 0, 5, 7, 4],
      [0, 0, 5, 8, 3, 2, 0, 0, 0],
    ],
    solution: [
      [4, 8, 7, 2, 1, 3, 9, 6, 5],
      [3, 1, 2, 9, 5, 6, 7, 4, 8],
      [6, 5, 9, 7, 8, 4, 2, 3, 1],
      [8, 2, 4, 3, 9, 1, 6, 5, 7],
      [5, 7, 6, 4, 2, 8, 3, 1, 9],
      [1, 9, 3, 6, 7, 5, 4, 8, 2],
      [9, 6, 1, 5, 4, 7, 8, 2, 3],
      [2, 3, 8, 1, 6, 9, 5, 7, 4],
      [7, 4, 5, 8, 3, 2, 1, 9, 6],
    ],
    summary: 'Balanced grid that rewards methodical pencilmarks.',
  },
  {
    id: 'classic-hard-001',
    name: 'Precision Test',
    variant: 'classic',
    difficulty: 'hard',
    size: 9,
    release: '2025-02-01',
    puzzle: [
      [6, 7, 0, 0, 0, 8, 0, 0, 0],
      [8, 0, 0, 0, 9, 0, 0, 0, 4],
      [0, 0, 5, 0, 0, 0, 0, 0, 3],
      [0, 8, 9, 0, 0, 5, 0, 6, 0],
      [0, 0, 7, 0, 6, 0, 3, 0, 0],
      [0, 6, 0, 9, 0, 0, 5, 0, 0],
      [9, 0, 0, 6, 0, 0, 0, 0, 0],
      [7, 0, 0, 0, 4, 0, 0, 0, 1],
      [0, 0, 8, 1, 0, 0, 7, 5, 0],
    ],
    solution: [
      [6, 7, 4, 3, 2, 8, 1, 9, 5],
      [8, 2, 3, 5, 9, 1, 6, 7, 4],
      [1, 9, 5, 4, 7, 6, 8, 2, 3],
      [3, 8, 9, 7, 1, 5, 4, 6, 2],
      [5, 1, 7, 2, 6, 4, 3, 8, 9],
      [4, 6, 2, 9, 8, 3, 5, 1, 7],
      [9, 3, 1, 6, 5, 7, 2, 4, 8],
      [7, 5, 6, 8, 4, 2, 9, 3, 1],
      [2, 4, 8, 1, 3, 9, 7, 5, 6],
    ],
    summary: 'Demanding classic grid tuned for advanced strategies.',
  },
  {
    id: 'classic-hard-002',
    name: 'Cadence Builder',
    variant: 'classic',
    difficulty: 'hard',
    size: 9,
    release: '2025-02-08',
    puzzle: [
      [7, 0, 3, 0, 0, 0, 0, 1, 0],
      [0, 1, 0, 0, 0, 0, 4, 0, 0],
      [4, 0, 0, 0, 2, 0, 0, 8, 0],
      [0, 0, 0, 0, 0, 0, 9, 2, 0],
      [8, 0, 0, 9, 0, 2, 0, 0, 5],
      [0, 2, 4, 0, 0, 3, 0, 0, 0],
      [0, 5, 0, 0, 1, 0, 0, 0, 8],
      [0, 0, 8, 2, 0, 0, 0, 7, 0],
      [0, 7, 0, 6, 0, 0, 2, 0, 9],
    ],
    solution: [
      [7, 8, 3, 4, 6, 9, 5, 1, 2],
      [5, 1, 2, 7, 3, 8, 4, 9, 6],
      [4, 9, 6, 5, 2, 1, 7, 8, 3],
      [1, 3, 5, 8, 7, 6, 9, 2, 4],
      [8, 6, 7, 9, 4, 2, 1, 3, 5],
      [9, 2, 4, 1, 5, 3, 8, 6, 7],
      [2, 5, 9, 3, 1, 7, 6, 4, 8],
      [6, 4, 8, 2, 9, 5, 3, 7, 1],
      [3, 7, 1, 6, 8, 4, 2, 5, 9],
    ],
    summary: 'Layered deductions plus a few deliberate choke points.',
  },
  {
    id: 'diagonal-hard-001',
    name: 'Crossfire',
    variant: 'diagonal',
    difficulty: 'hard',
    size: 9,
    release: '2025-02-10',
    puzzle: [
      [8, 0, 2, 0, 0, 9, 0, 0, 3],
      [7, 0, 0, 0, 0, 0, 4, 8, 0],
      [0, 0, 0, 3, 0, 2, 7, 0, 0],
      [0, 2, 3, 7, 6, 0, 0, 0, 0],
      [0, 5, 0, 8, 0, 0, 0, 0, 0],
      [0, 0, 7, 0, 0, 0, 1, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 7],
      [0, 0, 0, 0, 0, 7, 0, 9, 0],
      [0, 0, 0, 5, 0, 0, 0, 6, 1],
    ],
    solution: [
      [8, 1, 2, 4, 7, 9, 6, 5, 3],
      [7, 3, 9, 1, 5, 6, 4, 8, 2],
      [5, 4, 6, 3, 8, 2, 7, 1, 9],
      [1, 2, 3, 7, 6, 5, 9, 4, 8],
      [9, 5, 4, 8, 2, 1, 3, 7, 6],
      [6, 8, 7, 9, 3, 4, 1, 2, 5],
      [2, 9, 1, 6, 4, 8, 5, 3, 7],
      [3, 6, 5, 2, 1, 7, 8, 9, 4],
      [4, 7, 8, 5, 9, 3, 2, 6, 1],
    ],
    rules: ['Both main diagonals must also contain digits 1-9.'],
    summary: 'Diagonal constraints force creative chains across the grid.',
  },
  {
    id: 'irregular-hard-001',
    name: 'Shapeshift',
    variant: 'irregular',
    difficulty: 'hard',
    size: 9,
    release: '2025-02-12',
    puzzle: [
      [0, 0, 0, 5, 0, 0, 6, 0, 4],
      [0, 0, 0, 0, 0, 1, 0, 0, 7],
      [0, 0, 1, 0, 2, 8, 3, 0, 0],
      [0, 0, 0, 9, 0, 0, 4, 0, 1],
      [0, 0, 2, 0, 7, 0, 5, 0, 0],
      [9, 0, 6, 0, 0, 2, 0, 0, 0],
      [0, 0, 4, 0, 1, 7, 8, 0, 0],
      [2, 1, 0, 3, 0, 0, 0, 0, 0],
      [3, 0, 5, 0, 0, 0, 0, 0, 0],
    ],
    solution: [
      [7, 2, 8, 5, 3, 9, 6, 1, 4],
      [5, 3, 9, 4, 6, 1, 2, 8, 7],
      [4, 6, 1, 7, 2, 8, 3, 9, 5],
      [8, 7, 3, 9, 5, 6, 4, 2, 1],
      [1, 4, 2, 8, 7, 3, 5, 6, 9],
      [9, 5, 6, 1, 4, 2, 7, 3, 8],
      [6, 9, 4, 2, 1, 7, 8, 5, 3],
      [2, 1, 7, 3, 8, 5, 9, 4, 6],
      [3, 8, 5, 6, 9, 4, 1, 7, 2],
    ],
    regions: [
      [
        [0, 2],
        [0, 5],
        [2, 3],
        [3, 1],
        [3, 3],
        [3, 7],
        [4, 4],
        [5, 5],
        [6, 2],
      ],
      [
        [1, 0],
        [1, 2],
        [2, 4],
        [2, 7],
        [3, 4],
        [4, 6],
        [5, 2],
        [7, 8],
        [8, 7],
      ],
      [
        [0, 3],
        [0, 8],
        [1, 6],
        [2, 6],
        [2, 8],
        [4, 2],
        [6, 1],
        [6, 7],
        [6, 8],
      ],
      [
        [0, 4],
        [0, 7],
        [1, 8],
        [3, 6],
        [4, 0],
        [4, 1],
        [5, 6],
        [7, 0],
        [8, 4],
      ],
      [
        [0, 0],
        [1, 4],
        [4, 3],
        [4, 5],
        [4, 8],
        [5, 3],
        [6, 0],
        [7, 6],
        [8, 2],
      ],
      [
        [1, 3],
        [1, 5],
        [2, 5],
        [5, 0],
        [5, 8],
        [7, 4],
        [7, 5],
        [8, 5],
        [8, 6],
      ],
      [
        [0, 1],
        [2, 2],
        [3, 2],
        [3, 5],
        [6, 4],
        [7, 1],
        [7, 2],
        [8, 1],
        [8, 8],
      ],
      [
        [0, 6],
        [1, 1],
        [2, 0],
        [3, 0],
        [5, 4],
        [5, 7],
        [6, 3],
        [6, 6],
        [8, 0],
      ],
      [
        [1, 7],
        [2, 1],
        [3, 8],
        [4, 7],
        [5, 1],
        [6, 5],
        [7, 3],
        [7, 7],
        [8, 3],
      ],
    ],
    summary: 'Jigsaw regions shake up scanning routes and force new habits.',
  },
  {
    id: 'killer-impossible-001',
    name: 'Cage Match',
    variant: 'killer',
    difficulty: 'impossible',
    size: 9,
    release: '2025-02-15',
    puzzle: [
      [0, 0, 0, 0, 0, 0, 3, 0, 4],
      [0, 2, 0, 4, 3, 1, 9, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 2, 7],
      [0, 9, 1, 0, 7, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 5, 6],
      [0, 0, 0, 0, 0, 0, 8, 9, 0],
      [0, 7, 0, 0, 0, 0, 0, 0, 0],
      [0, 8, 0, 9, 6, 0, 0, 4, 0],
      [2, 0, 5, 3, 0, 0, 0, 0, 0],
    ],
    solution: [
      [9, 6, 8, 7, 5, 2, 3, 1, 4],
      [5, 2, 7, 4, 3, 1, 9, 6, 8],
      [3, 1, 4, 8, 9, 6, 5, 2, 7],
      [8, 9, 1, 6, 7, 5, 4, 3, 2],
      [4, 3, 2, 1, 8, 9, 7, 5, 6],
      [7, 5, 6, 2, 4, 3, 8, 9, 1],
      [6, 7, 9, 5, 2, 4, 1, 8, 3],
      [1, 8, 3, 9, 6, 7, 2, 4, 5],
      [2, 4, 5, 3, 1, 8, 6, 7, 9],
    ],
    cages: [
      {
        sum: 23,
        cells: [
          [0, 0],
          [0, 1],
          [0, 2],
        ],
      },
      {
        sum: 14,
        cells: [
          [0, 3],
          [0, 4],
          [0, 5],
        ],
      },
      {
        sum: 8,
        cells: [
          [0, 6],
          [0, 7],
          [0, 8],
        ],
      },
      {
        sum: 14,
        cells: [
          [1, 0],
          [1, 1],
          [1, 2],
        ],
      },
      {
        sum: 8,
        cells: [
          [1, 3],
          [1, 4],
          [1, 5],
        ],
      },
      {
        sum: 23,
        cells: [
          [1, 6],
          [1, 7],
          [1, 8],
        ],
      },
      {
        sum: 8,
        cells: [
          [2, 0],
          [2, 1],
          [2, 2],
        ],
      },
      {
        sum: 23,
        cells: [
          [2, 3],
          [2, 4],
          [2, 5],
        ],
      },
      {
        sum: 14,
        cells: [
          [2, 6],
          [2, 7],
          [2, 8],
        ],
      },
      {
        sum: 18,
        cells: [
          [3, 0],
          [3, 1],
          [3, 2],
        ],
      },
      {
        sum: 18,
        cells: [
          [3, 3],
          [3, 4],
          [3, 5],
        ],
      },
      {
        sum: 9,
        cells: [
          [3, 6],
          [3, 7],
          [3, 8],
        ],
      },
      {
        sum: 9,
        cells: [
          [4, 0],
          [4, 1],
          [4, 2],
        ],
      },
      {
        sum: 18,
        cells: [
          [4, 3],
          [4, 4],
          [4, 5],
        ],
      },
      {
        sum: 18,
        cells: [
          [4, 6],
          [4, 7],
          [4, 8],
        ],
      },
      {
        sum: 18,
        cells: [
          [5, 0],
          [5, 1],
          [5, 2],
        ],
      },
      {
        sum: 9,
        cells: [
          [5, 3],
          [5, 4],
          [5, 5],
        ],
      },
      {
        sum: 18,
        cells: [
          [5, 6],
          [5, 7],
          [5, 8],
        ],
      },
      {
        sum: 22,
        cells: [
          [6, 0],
          [6, 1],
          [6, 2],
        ],
      },
      {
        sum: 11,
        cells: [
          [6, 3],
          [6, 4],
          [6, 5],
        ],
      },
      {
        sum: 12,
        cells: [
          [6, 6],
          [6, 7],
          [6, 8],
        ],
      },
      {
        sum: 12,
        cells: [
          [7, 0],
          [7, 1],
          [7, 2],
        ],
      },
      {
        sum: 22,
        cells: [
          [7, 3],
          [7, 4],
          [7, 5],
        ],
      },
      {
        sum: 11,
        cells: [
          [7, 6],
          [7, 7],
          [7, 8],
        ],
      },
      {
        sum: 11,
        cells: [
          [8, 0],
          [8, 1],
          [8, 2],
        ],
      },
      {
        sum: 12,
        cells: [
          [8, 3],
          [8, 4],
          [8, 5],
        ],
      },
      {
        sum: 22,
        cells: [
          [8, 6],
          [8, 7],
          [8, 8],
        ],
      },
    ],
    summary: 'Layer cage sums over a brutally sparse starting grid.',
  },
  {
    id: 'mini-easy-001',
    name: 'Mini Loop',
    variant: 'mini',
    difficulty: 'easy',
    size: 6,
    box: { rows: 2, cols: 3 },
    release: '2025-02-05',
    puzzle: [
      [0, 0, 0, 0, 0, 0],
      [4, 5, 6, 0, 0, 0],
      [0, 0, 0, 0, 0, 0],
      [5, 6, 0, 0, 3, 4],
      [3, 0, 0, 0, 1, 0],
      [0, 0, 0, 0, 0, 5],
    ],
    solution: [
      [1, 2, 3, 4, 5, 6],
      [4, 5, 6, 1, 2, 3],
      [2, 3, 4, 5, 6, 1],
      [5, 6, 1, 2, 3, 4],
      [3, 4, 5, 6, 1, 2],
      [6, 1, 2, 3, 4, 5],
    ],
    summary: 'Compact 6x6 grid ideal for quick daily streaks.',
  },
];

function cloneBoard(board) {
  return board.map((row) => row.slice());
}

function cloneNested(value) {
  if (!value) return value;
  if (Array.isArray(value)) return value.map((item) => cloneNested(item));
  if (typeof value === 'object') return { ...value };
  return value;
}

export function createMask(board) {
  return board.map((row) => row.map((cell) => cell !== 0));
}

const catalogById = new Map(PUZZLE_CATALOG.map((p) => [p.id, p]));

export function getPuzzleById(id) {
  const entry = catalogById.get(id);
  if (!entry) return null;
  return {
    ...entry,
    puzzle: cloneBoard(entry.puzzle),
    solution: cloneBoard(entry.solution),
    regions: cloneNested(entry.regions),
    cages: cloneNested(entry.cages),
    box: cloneNested(entry.box),
  };
}

export function listPuzzles() {
  return PUZZLE_CATALOG.map((p) => ({
    id: p.id,
    name: p.name,
    variant: p.variant,
    difficulty: p.difficulty,
    release: p.release,
  }));
}

export { PUZZLE_CATALOG };
